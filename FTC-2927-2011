#pragma config(Hubs,  S1, HTMotor,  HTMotor,  HTServo,  none)
#pragma config(Sensor, S1,     ,                    sensorI2CMuxController)
#pragma config(Motor,  mtr_S1_C1_1,     fleftie,       tmotorNormal, openLoop)
#pragma config(Motor,  mtr_S1_C1_2,     leftie,        tmotorNormal, openLoop)
#pragma config(Motor,  mtr_S1_C2_1,     frightie,      tmotorNormal, openLoop)
#pragma config(Motor,  mtr_S1_C2_2,     rightie,       tmotorNormal, openLoop)
#pragma config(Servo,  srvo_S1_C3_1,    lswivel,              tServoStandard)
#pragma config(Servo,  srvo_S1_C3_2,    rswivel,              tServoStandard)
#pragma config(Servo,  srvo_S1_C3_3,    rarm,                 tServoStandard)
#pragma config(Servo,  srvo_S1_C3_4,    larm,                 tServoStandard)
#pragma config(Servo,  srvo_S1_C3_5,    servo5,               tServoNone)
#pragma config(Servo,  srvo_S1_C3_6,    servo6,               tServoNone)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

/////////////////////////////////////////////////////////////////////////////////////////////////////
//
//                           Tele-Operation Mode Code Template
//
// This file contains a template for simplified creation of an tele-op program for an FTC
// competition.
//
// You need to customize two functions with code unique to your specific robot.
//
/////////////////////////////////////////////////////////////////////////////////////////////////////

#include "JoystickDriver.c"  //Include file to "handle" the Bluetooth messages.


/////////////////////////////////////////////////////////////////////////////////////////////////////
//
//                                    initializeRobot
//
// Prior to the start of tele-op mode, you may want to perform some initialization on your robot
// and the variables within your program.
//
// In most cases, you may not have to add any code to this function and it will remain "empty".
//
/////////////////////////////////////////////////////////////////////////////////////////////////////

void initializeRobot()
{
servo[larm] = 0;
servo[rarm] = 255;
servo[lswivel] = 0;
servo[rswivel] = 255;
 return;
}

void motorControlProportional()
{
 int nMotor1;
 int nMotor2;
 int nMotor3;
 int nMotor4;

 nMotor1 = joystick.joy1_y1;
 nMotor2  = joystick.joy1_y2;
 nMotor3 = joystick.joy1_y1;
 nMotor4  = joystick.joy1_y2;

 motor[leftie] = nMotor1;
 motor[rightie] = -nMotor2;
 motor[fleftie] = nMotor3;
 motor[frightie] = -nMotor4;
}

void buttonControl()
{
 if(joy2Btn(2))
 {
 servo[larm] = 0;
 servo[rarm] = 255;
 }
 else {
 servo[larm] = 255;
 servo[rarm] = 0;
 }
 if(joy2Btn(3))
 {
 servo[lswivel] = 255;
 servo[rswivel] = 0;
 }
 else {
 servo[lswivel] = 0;
 servo[rswivel] = 255;
 }

}

/////////////////////////////////////////////////////////////////////////////////////////////////////
//
//                                         Main Task
//
// The following is the main code for the tele-op robot operation. Customize as appropriate for
// your specific robot.
//
// Game controller / joystick information is sent periodically (about every 50 milliseconds) from
// the FMS (Field Management System) to the robot. Most tele-op programs will follow the following
// logic:
//   1. Loop forever repeating the following actions:
//   2. Get the latest game controller / joystick settings that have been received from the PC.
//   3. Perform appropriate actions based on the joystick + buttons settings. This is usually a
//      simple action:
//      *  Joystick values are usually directly translated into power levels for a motor or
//         position of a servo.
//      *  Buttons are usually used to start/stop a motor or cause a servo to move to a specific
//         position.
//   4. Repeat the loop.
//
// Your program needs to continuously loop because you need to continuously respond to changes in
// the game controller settings.
//
// At the end of the tele-op period, the FMS will autonmatically abort (stop) execution of the program.
//
/////////////////////////////////////////////////////////////////////////////////////////////////////

//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//



task main()
{


 initializeRobot();

 waitForStart();   // wait for start of tele-op phase

 while (true)
 {
   getJoystickSettings(joystick);
   motorControlProportional();
   buttonControl();
 }
}
